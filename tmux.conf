# use UTF8
# set -g utf8
# set-window-option -g utf8 on

# 256 color mode
set -g default-terminal "xterm-256color"

set-option -g set-titles on
# Tmux attach will create a new session if one doesn't exist
# new-session -n $HOST

# set scrollback history
set -g history-limit 10000

# set Ctrl-a as prefix and unbind Ctrl-b
set -g prefix C-a
unbind C-b

# last active window
# bind-key C-a last-window
bind Tab last-window

# pass prefix through to application
bind C-a send-prefix

# don't constrain size unless smaller client looking at window
setw -g aggressive-resize on

# set command delay
set -sg escape-time 1

# set base index to 1 rather than 0
set-option -g base-index 1
setw -g pane-base-index 1

# use PREFIX-r to reload config
bind r source-file ~/.tmux.conf \; display "Reloaded config"

# PREFIX | splits horizontally and PREFIX - splits vertically
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# open new window with pwd
bind c new-window -c "#{pane_current_path}"

# PREFIX T makes current window index 1
bind T swap-window -t 1

# use vim movement for panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# bind C-h and C-l to cycle through panes
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# Synchonize keyboard input across panes
bind a setw synchronize-panes

# open calendar
bind-key C run-shell "cal $(date +%Y)"

# mouse support
# set -g mode-mouse on # scrolling
# set -g mouse-select-pane on # clicking into panes
# set -g mouse-resize-pane on # resizing panes
# set -g mouse-select-window on # select windows

set-option -g -q mouse on

# Copy Mode
bind-key -T root PPage if-shell -F "#{alternate_on}" "send-keys PPage" "copy-mode -e; send-keys PPage"
bind-key -T copy-mode-vi PPage send-keys -X page-up
bind-key -T copy-mode-vi NPage send-keys -X page-down
# Mouse Wheel
bind-key -T root WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"
bind-key -T copy-mode-vi WheelUpPane send-keys -X halfpage-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X halfpage-down

# toggle mouse support
# bind m \
#     # set -g mode-mouse on \;\
#     # set -g mouse-resize-pane on \;\
#     # set -g mouse-select-pane on \;\
#     # set -g mouse-select-window on \;\
#     set-option -g -q mouse on
#     display 'Mouse: ON'

# bind M \
#     # set -g mode-mouse off \;\
#     # set -g mouse-resize-pane off \;\
#     # set -g mouse-select-pane off \;\
#     # set -g mouse-select-window off \;\
#     set-option -g -q mouse off
#     display 'Mouse: OFF'

# Make sure the client is always using the correct environment
# eval $(tmux switch-client \; show-environment -s)

# Copy/Paste
#
# provide access to clipboard
# set-option -g default-command "reattach-to-user-namespace -l zsh"
# set-window-option -g automatic-rename on

# use vim keybindings in copy mode
setw -g mode-keys vi

# v selection
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"

# make enter use copy pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe "reattach-to-user-namespace pbcopy"

bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '1

# ----------------------
# set some pretty colors
# ----------------------
# set pane colors - hilight the active pane
# set-option -g pane-border-fg colour235 #base02
# set-option -g pane-active-border-fg colour240 #base01

# Show active pane
# set-window-option -g window-style 'bg=#181818'
# set-window-option -g window-active-style 'bg=black'
# set-window-option -g pane-active-border-style ''
# set-window-option -g pane-active-border-style 'fg=#181818'

# colorize messages in the command line
set-option -g message-bg black #base02
set-option -g message-fg brightred #orange

# Powerline
run-shell "powerline-daemon -q"
source '/usr/local/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf'
# source '/usr/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf'
# source $POWERLINE_ROOT/powerline/bindings/tmux/powerline.conf
# /usr/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf

# Local overrides
if-shell "[ -f ~/.tmux_local.conf ]" 'source ~/.tmux_local.conf'
